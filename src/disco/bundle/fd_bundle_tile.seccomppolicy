# logfile_fd: It can be disabled by configuration, but typically tiles
#             will open a log file on boot and write all messages there.
#
# keylog_fd: Log HTTPS session keys to file (development option)
#
# etc_hosts_fd, etc_resolv_conf: Used to resolve DNS records.
uint logfile_fd, uint keylog_fd, uint etc_hosts_fd, uint etc_resolv_conf

# bundle: Read from TCP connection (HTTPS)
#
# resolv: Read DNS config
read

# bundle: Read from TCP connection (HTTP)
#
# resolv: Receive DNS responses
recvmsg: (or (eq (arg 2) "MSG_NOSIGNAL|MSG_DONTWAIT")
             (eq (arg 2) 0))

# bundle: Write to TCP connection (HTTPS)
#
# logging: all log messages are written to a file and/or pipe
#
# 'WARNING' and above are written to the STDERR pipe, while all
# messages are always written to the log file.
#
# arg 0 is the file descriptor to write to.  The boot process ensures
# that descriptor 2 is always STDERR.
write

# OpenSSL: SSLKEYLOGFILE
writev: (and (eq (arg 0) keylog_fd)
             (eq (arg 2) 2))

# bundle: Write to TCP connection (HTTP)
#
# resolv: Send DNS queries via UDP or TCP
sendmsg: (or (eq (arg 2) "MSG_NOSIGNAL|MSG_DONTWAIT")
             (eq (arg 2) "MSG_FASTOPEN|MSG_NOSIGNAL")
             (eq (arg 2) "MSG_NOSIGNAL"))

# resolv: Send DNS queries via UDP or TCP
sendto: (eq (arg 3) "MSG_NOSIGNAL")

# logging: 'WARNING' and above fsync the logfile to disk immediately
#
# arg 0 is the file descriptor to fsync.
fsync: (eq (arg 0) logfile_fd)

# bundle: TCP connection to the bundle server needs to be established.
#
# resolv: Send DNS queries via UDP or TCP
socket: (and (or (eq (arg 0) "AF_INET")
                 (eq (arg 0) "AF_INET6"))
             (or (and (or (eq (arg 1) "SOCK_STREAM|SOCK_CLOEXEC")
                          (eq (arg 1) "SOCK_STREAM|SOCK_CLOEXEC|SOCK_NONBLOCK"))
                      (eq (arg 2) 0))
                 (and (eq (arg 1) "SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK")
                      (eq (arg 2) 0))
                 (and (eq (arg 1) "SOCK_DGRAM|SOCK_CLOEXEC")
                      (eq (arg 2) "IPPROTO_UDP"))))
connect

# bundle: TCP connection is closed if there is an error, and a new one
#         is reopened
shutdown: (eq (arg 1) "SHUT_WR")

# bundle: TCP connection is closed if there is an error, and a new one
#         is reopened
# resolv: Close UDP/TCP sockets once done querying DNS
close

# bundle: Make TCP connection non-blocking
fcntl: (and (eq (arg 1) "F_SETFL")
            (eq (arg 2) "O_NONBLOCK"))

# resolv: Bind DNS request socket
bind: (or (eq (arg 2) "sizeof(struct sockaddr_in)")
          (eq (arg 2) "sizeof(struct sockaddr_in6)"))

# bundle: Wait for TCP connection to be established
#
# resolv: Wait for DNS responses
poll

# bundle: configure TCP socket (for gRPC connection)
#
# resolv: configure UDP or TCP socket (for DNS queries)
setsockopt: (or (and (eq (arg 1) SOL_SOCKET)
                     (eq (arg 2) SO_RCVBUF))
                (and (eq (arg 1) IPPROTO_TCP)
                     (eq (arg 2) TCP_FASTOPEN_CONNECT))
                (and (eq (arg 1) IPPROTO_IPV6)
                     (eq (arg 2) IPV6_V6ONLY)))

# resolv: check if DNS queries use IPv6
getsockname

# openssl: RAND_bytes requires getpid
#
# QUIC uses OpenSSL RAND_bytes to generate randomness, which it uses for
# picking connection IDs.  The OpenSSL implementation calls getpid() as
# an implementation detail, they save the PID in a global and reseed the
# RNG if the PID ever changes (the process was forked).  We don't need
# this logic since our process can't fork.
getpid

# openssl: RAND_bytes requires getrandom
#
# QUIC uses OpenSSL RAND_bytes to generate randomness, which it uses for
# picking connection IDs.  The OpenSSL implementation calls getrandom
# internally for periodically reseeding the RNG.
getrandom

# resolv: Read DNS config
lseek: (and (or (eq (arg 0) etc_resolv_conf)
                (eq (arg 0) etc_hosts_fd))
            (eq (arg 1) 0)
            (eq (arg 2) "SEEK_SET"))
