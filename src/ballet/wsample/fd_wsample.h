#ifndef HEADER_fd_src_ballet_shred_fd_wsample_h
#define HEADER_fd_src_ballet_shred_fd_wsample_h

/* This header defines methods for computing weighted "random" samples
   of the specific type used by Solana for computing the leader
   schedule and the Turbine tree.

   In particular, those random samples are generated by:

   1. Seeding ChaCha20 with a 32B seed (different for leader schedule vs
      Turbine).
   2. Using the ChaCha20 random stream to generate a uniformly
      distributed random integer x in [0, total_stake_weight).
   3. Returning the first index such that the cumulative sum of stake is
      at least x. */

#include "../fd_ballet_base.h"
#include "../chacha20/fd_chacha20rng.h"

struct fd_wsample_private;
typedef struct fd_wsample_private fd_wsample_t;

#define FD_WSAMPLE_ALIGN (32UL)
#define FD_WSAMPLE_FOOTPRINT( ele_cnt ) ( (ele_cnt>=UINT_MAX) ? 0UL : ( 64UL + 64UL*(ele_cnt) ) )
/* fd_wsample_{align, footprint} give the alignment and footprint
   repectively required to create a stake weight tree with at most
   ele_cnt stake weights.


   fd_wsample_{join,leave} join and leave a memory region formatted as a
   stake weight tree, respectively.  They both are simple casts.

   fd_wsample_delete unformats a memory region used as a stake weight
   tree.  Releases all interest in rng. */

FD_FN_CONST ulong fd_wsample_align    ( void          );
FD_FN_CONST ulong fd_wsample_footprint( ulong ele_cnt );
fd_wsample_t *    fd_wsample_join     ( void * shmem  );
void *            fd_wsample_leave    ( fd_wsample_t * tree );
void *            fd_wsample_delete   ( void * shmem  );


/* FD_WSAMPLE_HINT_*: Hints that can be passed to fd_wsample_new in the
   opt_hint field.  The hint specifies the distribution of weights:
   FLAT: The all weights are approximately constant.
   POWERLAW: The weights are sorted largest to smallest and decay with a
       power law distribution.  At the moment, this assumes it's
       proportional to 1/x.

   The hint can also specify whether sampling will be done with deleting
   or without deleting:
   DELETE: Sampling will be done without replacement, i.e. mostly with
       fd_wsample_sample_and_delete and/or
       fd_wsample_sample_and_delete_many.
   NODELETE: Sampling will be done with replacement, i.e. mostly with
       fd_wsample_sample and/or
       fd_wsample_sample_many. */
#define FD_WSAMPLE_HINT_FLAT              0
#define FD_WSAMPLE_HINT_POWERLAW_NODELETE 2
#define FD_WSAMPLE_HINT_POWERLAW_DELETE   3

/* fd_wsample_new formats a memory region with the appropriate alignment
   and footprint to be usable as a stake weight tree.  shmem is a
   pointer to the first byte of the memory region to use.  rng must be a
   local join of a ChaCha20 RNG struct. The stake weight tree will use
   rng to generate random numbers.  The tree owning its own rng seems
   more natural, but this is done to facilitate sharing of rngs between
   stake weight trees, which is useful for Turbine.  weights points to
   the first element of an array of length ele_cnt.  All elements in
   weights must be strictly positive, and the sum must be less than
   ULONG_MAX.  ele_cnt must be less than UINT_MAX.  opt_hint gives a
   hint of the shape of the weights and the style of queries that will
   be most common; this hint impacts query performance but not
   correctness.  opt_hint must be one of FD_WSAMPLE_HINT_*.

   On successful return, the tree contains an element corresponding to
   each provided weight.  Returns shmem on success and NULL on failure.
   Caller is not joined on return. */
void * fd_wsample_new( void             * shmem,
                       fd_chacha20rng_t * rng,
                       ulong            * weights,
                       ulong              ele_cnt,
                       int                opt_hint );

/* fd_wsample_get_rng returns the value provided for rng in new. */
fd_chacha20rng_t * fd_wsample_get_rng( fd_wsample_t * tree );

/* fd_wsample_seed_rng seeds the ChaCha20 rng with the provided seed in
   preparation for sampling.  This function is compatible with Solana's
   ChaChaRng::from_seed. */
void fd_wsample_seed_rng( fd_chacha20rng_t * rng, uchar seed[static 32] );

/* fd_wsample_sample{_and_delete}{,_many} produces one or cnt (in the
   _many case) weighted random samples from the tree.  If the
   _and_delete variant of the function is called, the returned node will
   be temporarily deleted from the tree, i.e. for sampling without
   replacement.  Random samples are produced using the Solana-required
   method.  The stake weight tree's RNG must be seeded appropriately
   prior to using these functions.

   The _many variants of the function store the ith index they sampled
   in idxs[i] for i in [0, cnt).  The other variants of the function
   simply return the sampled index.

   If the tree has no undeleted elements, these functions will
   return/store FD_WSAMPLE_EMPTY.

   For each index i, fd_wsample_sample returns i with
   probability weights[i]/sum(weights). */
#define FD_WSAMPLE_EMPTY UINT_MAX
ulong fd_wsample_sample                ( fd_wsample_t * tree );
ulong fd_wsample_sample_and_delete     ( fd_wsample_t * tree );
void  fd_wsample_sample_many           ( fd_wsample_t * tree, ulong * idxs, ulong cnt );
void  fd_wsample_sample_and_delete_many( fd_wsample_t * tree, ulong * idxs, ulong cnt );

/* fd_wsample_undelete_all restores all elements deleted with one of the
   sample_and_delete functions with their original stake weight.  This
   is faster than recreatign the stake weight tree, even if all elements
   have been deleted. */
void fd_wsample_undelete_all( fd_wsample_t * tree );



#endif /* HEADER_fd_src_ballet_shred_fd_wsample_h */
