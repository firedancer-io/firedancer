# logfile_fd: It can be disabled by configuration, but typically tiles
#             will open a log file on boot and write all messages there.
unsigned int logfile_fd

# logging: all log messages are written to a file and/or pipe
#
# 'WARNING' and above are written to the STDERR pipe, while all
# messages are always written to the log file.
#
# arg 0 is the file descriptor to write to.  The boot process ensures
# that descriptor 2 is always STDERR.
write: (or (eq (arg 0) 2)
           (eq (arg 0) logfile_fd))

# logging: 'WARNING' and above fsync the logfile to disk immediately
#
# arg 0 is the file descriptor to fsync.
fsync: (eq (arg 0) logfile_fd)

# metrics: retrieve number of context switches by rereading /proc
#
# arg 0 is the file descriptor to seek.  It can be any of the
# /proc/status file descriptors opened during privileged init.  To
# accomodate this, we allow any file descriptor except those which we
# know are not these /proc/status files, which are the log file and
# STDOUT.
lseek: (and (not (or (eq (arg 0) 2)
                 (eq (arg 0) logfile_fd)))
            (eq (arg 1) 0)
            (eq (arg 2) "SEEK_SET"))

# metrics: retrieve number of context switches by rereading /proc
#
# arg 0 is the file descriptor to read.  It can be any of the
# /proc/status file descriptors opened during privileged init.  To
# accomodate this, we allow any file descriptor except those which we
# know are not these /proc/status files, which are the log file and
# STDOUT.
read: (not (or (eq (arg 0) 2)
               (eq (arg 0) logfile_fd)))
