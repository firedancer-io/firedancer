# logfile_fd: It can be disabled by configuration, but typically tiles
#             will open a log file on boot and write all messages there.
#
# xsk_fd: This is the file descriptor for the kernel XDP socket we
#         created for the primary network device.
#
# lo_xsk_fd: This is the file descriptor for the kernel XDP socket we
#            created for the loopback network device.  This is currently
#            needed because Solana sends packets to itself on loopback.
#
# netlink_fd: The NET tile uses netlink to talk to the kernel and fetch
#             the ARP table to fill in ethernet headers on outgoing
#             packets.  This is the file descriptor of the netlink
#             socket.
unsigned int logfile_fd, unsigned int xsk_fd, unsigned int lo_xsk_fd, unsigned int netlink_fd

# logging: all log messages are written to a file and/or pipe
#
# 'WARNING' and above are written to the STDERR pipe, while all messages
# are always written to the log file.
#
# arg 0 is the file descriptor to write to.  The boot process ensures
# that descriptor 2 is always STDERR and descriptor 4 is the logfile.
write: (or (eq (arg 0) 2)
           (eq (arg 0) logfile_fd))

# logging: 'WARNING' and above fsync the logfile to disk immediately
#
# arg 0 is the file descriptor to fsync.  The boot process ensures that
# descriptor 3 is always the logfile.
fsync: (eq (arg 0) logfile_fd)

# XDP: we need to call sendto to notify the kernel there are new entries
#      in the TX ring
#
# The kernel has no mechanism to continuously poll the TX queue to see if
# there are new packets for the driver to send, so instead we must
# notify it.  The sendto syscall has been overloaded by Linux for this
# purpose.
#
# arg 0 is the file descriptor of the XSK that the kernel should poll
# for entries.  There are two possible XSKs, since we can send packets
# on a network device or the loopback device.

# netlink: send netlink messages to kernel requesting ARP tables
#
# Because Firedancer does kernel bypass for networking, it needs to populate
# the ethernet headers on UDP packets it sends.  This requires consulting the
# kernel ARP table, which is done by calling sendto() on a special netlink
# socket.
#
# arg 0 is the netlink file descriptor to send packets to.
sendto: (or (and (or (eq (arg 0) xsk_fd)
                     (eq (arg 0) lo_xsk_fd))
                 (eq (arg 1) 0)
                 (eq (arg 2) 0)
                 (eq (arg 3) MSG_DONTWAIT)
                 (eq (arg 4) 0)
                 (eq (arg 5) 0))
            (and (eq (arg 0) netlink_fd)
                 (eq (arg 3) 0)
                 (eq (arg 4) 0)
                 (eq (arg 5) 0)))

# XDP: We use XDP_USE_NEED_WAKEUP so we must notify the kernel when
#      there are new entries in the fill ring
#
# The kernel by default continuously polls the fill ring of an XSK for
# new entries, so it can reuse these to put new incoming packets into.
# When using XDP_USE_NEED_WAKEUP, the kernel no longer does this as an
# optimization, and so if the fill ring becomes empty, we must notify
# the kernel when we replenish it.  The recvmsg syscall has been
# overloaded by Linux for this purpose.
#
# arg 0 is the file descriptor of the XSK that the kernel should poll
# for entries.  There are two possible XSKs, since we can receive
# packets on a network device or the loopback device.
recvmsg: (and (or (eq (arg 0) xsk_fd) 
                  (eq (arg 0) lo_xsk_fd))
              (eq (arg 2) MSG_DONTWAIT))

# netlink: receive netlink messages from kernel for ARP tables
#
# This is the receive side of the above sendto() call, so when we send
# a request for ARP entries, we need to call recvfrom() on the socket
# to read the kernel response.
#
# arg 0 is the netlink file descriptor to receive packets from.
recvfrom: (and (eq (arg 0) netlink_fd)
               (eq (arg 3) 0)
               (eq (arg 4) 0)
               (eq (arg 5) 0))
