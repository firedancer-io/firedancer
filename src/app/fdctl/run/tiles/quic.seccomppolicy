# logfile_fd: It can be disabled by configuration, but typically tiles
#             will open a log file on boot and write all messages there.
#
# netlink_fd: The QUIC tile uses netlink to talk to the kernel and fetch
#             the ARP table to fill in ethernet headers on outgoing
#             packets.  This is the file descriptor of the netlink
#             socket.
unsigned int logfile_fd, unsigned int netlink_fd

# logging: all log messages are written to a file and/or pipe
#
# 'WARNING' and above are written to the STDERR pipe, while all messages
# are always written to the log file.
#
# arg 0 is the file descriptor to write to.  The boot process ensures
# that descriptor 2 is always STDERR.
write: (or (eq (arg 0) 2)
           (eq (arg 0) logfile_fd))

# logging: 'WARNING' and above fsync the logfile to disk immediately
#
# arg 0 is the file descriptor to fsync.
fsync: (eq (arg 0) logfile_fd)

# QUIC uses getrandom for cryptographically secure randomness.
getrandom

# netlink: send netlink messages to kernel requesting ARP tables
#
# Because Firedancer does kernel bypass for networking, it needs to populate
# the ethernet headers on UDP packets it sends.  This requires consulting the
# kernel ARP table, which is done by calling sendto() on a special netlink
# socket.
#
# In future this call should be moved to the networking tile so it can
# be isolated there.
#
# arg 0 is the netlink file descriptor to send packets to.
sendto: (and (eq (arg 0) netlink_fd)
             (eq (arg 3) 0)
             (eq (arg 4) 0)
             (eq (arg 5) 0))

# netlink: receive netlink messages from kernel for ARP tables
#
# This is the receive side of the above sendto() call, so when we send
# a request for ARP entries, we need to call recvfrom() on the socket
# to read the kernel response.
#
# arg 0 is the netlink file descriptor to receive packets from.
recvfrom: (and (eq (arg 0) netlink_fd)
               (eq (arg 3) 0)
               (eq (arg 4) 0)
               (eq (arg 5) 0))
