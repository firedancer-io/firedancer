syntax = "proto3";
package solana.capture;

import "nanopb.proto";
option (nanopb_fileopt).package = "fd_solcap";

// FileMeta is the metadata blob part of the file header
message FileMeta {
    // Number of the first slot in this capture file
    uint64 first_slot = 1;

    // Total number of slots in this capture file
    uint64 slot_cnt = 2;

    // Magic number of main block type
    fixed64 main_block_magic = 3;
}

// BankPreimage contains the pre-image of the bank hash for a given slot.
// Only present for slots that were not skipped.
message BankPreimage {
    uint64 slot = 1;

    bytes bank_hash = 2
        [(nanopb).max_size = 32, (nanopb).fixed_length = true];

    // prev_bank_hash is the bank hash of the previous block
    bytes prev_bank_hash = 3
        [(nanopb).max_size = 32, (nanopb).fixed_length = true];

    // account_delta_hash is the hash of the changed accounts
    bytes account_delta_hash = 4
        [(nanopb).max_size = 32, (nanopb).fixed_length = true];

    // poh_hash is the Proof-of-History hash of the current block
    bytes poh_hash = 5
        [(nanopb).max_size = 32, (nanopb).fixed_length = true];

    // signature_cnt is the number of transactions in the current block
    // TODO is this correct?
    uint64 signature_cnt = 6;

    // account_cnt is the number of accounts changed in the current
    // block.  This is also the number of leaves in the account delta
    // Merkle tree.
    uint64 account_cnt = 7;

    // account_table_coff is offset from the first byte of the current
    // chunk to the first byte of the account table chunk.
    int64 account_table_coff = 8;

    // accounts_lt_hash_checksum is the hash of all the accounts
    bytes accounts_lt_hash_checksum = 9
        [(nanopb).max_size = 32, (nanopb).fixed_length = true];
}

message AccountTableMeta {
    // slot is the slot number that this accounts table refers to.
    uint64 slot = 1;

    // account_table_coff is the chunk offset to the first entry of the
    // accounts table.
    uint64 account_table_coff = 2;

    // account_table_cnt is the number of records in the accounts table.
    // Equals BankPreimage.account_cnt.
    uint64 account_table_cnt = 3;
}

message AccountMeta {
    uint64 lamports = 1;
    uint64 slot = 2;
    uint64 rent_epoch = 3;
    bytes owner = 4
        [(nanopb).max_size = 32, (nanopb).fixed_length = true];
    bool executable = 5;

    // data_coff is the chunk offset to account data.
    int64 data_coff = 6;
    uint64 data_sz = 7;
}

// StakeRewardEpoch is emitted at the beginning of a series of stake
// reward events (StakeRewardEvent, VoteAccountPayout, or
// StakeAccountPayout).
message StakeRewardEpoch {
    // Epoch in which the rewards are paid out.
    uint64 payout_epoch = 1;

    // Epoch in which the rewards were generated (almost always one
    // less than payout_epoch)
    uint64 reward_epoch = 2;

    // Number of lamports generated by inflation.
    uint64 inflation_lamports = 3;

    // Total number of reward points generated by all vote accounts.
    // Each lamport of stake produces one reward point for every vote
    // credit that the delegated-to vote account generates.
    bytes points = 4
        [(nanopb).max_size = 16, (nanopb).fixed_length = true];

    // FIXME add unique block identifier
}

// StakeRewardEvent is emitted while calculating inflation rewards.
// Each stake account generates up to one of these events per epoch (at
// the epoch boundary).  On startup, these events are also generated.
message StakeRewardEvent {
    // Account address of the stake account that emitted this event.
    bytes stake_account_address = 1
        [(nanopb).max_size = 32, (nanopb).fixed_length = true];

    // Account address of the vote account that this stake account has
    // delegated stake to.
    bytes vote_account_address = 2
        [(nanopb).max_size = 32, (nanopb).fixed_length = true];

    // Commission setting (percentage, integer in [0,100]) used when
    // calculating vote/stake account reward split.
    uint32 commission = 3;

    // Lamport balance increase for vote account.
    int64 vote_rewards = 4;

    // Lamport balance increase for stake account.
    int64 stake_rewards = 5;

    int64 new_credits_observed = 6;
}

// VoteAccountPayout is emitted when stake rewards for a vote account
// are actually paid out.
message VoteAccountPayout {
    // Account address of the vote account.
    bytes address = 1
        [(nanopb).max_size = 32, (nanopb).fixed_length = true];

    // Slot number in which the payout occurred.
    uint64 update_slot = 2;

    // New lamport balance of account.
    uint64 lamports = 3;

    // New minus previous lamport balance.
    int64 lamports_delta = 4;
}

message StakeAccountPayout {
    // Account address of the stake account.
    bytes address = 1
        [(nanopb).max_size = 32, (nanopb).fixed_length = true];

    // Slot number in which the payout occurred.
    uint64 update_slot = 2;

    // New lamport balance of account.
    uint64 lamports = 3;

    // New minus previous lamport balance.
    int64 lamports_delta = 4;

    // New 'credits_observed' value of stake account.
    uint64 credits_observed = 5;

    // New minus previous 'credits_observed' value.
    int64 credits_observed_delta = 6;

    // New 'delegation.stake' value of stake account.
    uint64 delegation_stake = 7;

    // New minus previous 'delegation.stake' value of stake account.
    int64 delegation_stake_delta = 8;
}

message Transaction {
    bytes txn_sig = 1
        [(nanopb).max_size = 64, (nanopb).fixed_length = true];
    uint64 slot = 2;
    int32 fd_txn_err = 3;
    uint32 fd_custom_err = 4;
    uint64 solana_txn_err = 5;
    uint64 fd_cus_used = 6;
    uint64 solana_cus_used = 7;

    // failed_instr_path is the tree path to the failed instruction.
    // Zero length implies success.
    repeated uint32 failed_instr_path = 8
        [(nanopb).max_count = 4];

    // instr_err is the instruction processing error code.
    uint32 instr_err = 9;
    int32 instr_err_idx = 10;
}
