/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_SOLANA_CAPTURE_FD_SOLCAP_PB_H_INCLUDED
#define PB_SOLANA_CAPTURE_FD_SOLCAP_PB_H_INCLUDED
#include "../../ballet/nanopb/pb_firedancer.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* FileMeta is the metadata blob part of the file header */
typedef struct _fd_solcap_FileMeta {
    /* Number of the first slot in this capture file */
    uint64_t first_slot;
    /* Total number of slots in this capture file */
    uint64_t slot_cnt;
    /* Magic number of main block type */
    uint64_t main_block_magic;
} fd_solcap_FileMeta;

/* BankPreimage contains the pre-image of the bank hash for a given slot.
 Only present for slots that were not skipped. */
typedef struct _fd_solcap_BankPreimage {
    uint64_t slot;
    pb_byte_t bank_hash[32];
    /* prev_bank_hash is the bank hash of the previous block */
    pb_byte_t prev_bank_hash[32];
    /* account_delta_hash is the hash of the changed accounts */
    pb_byte_t account_delta_hash[32];
    /* poh_hash is the Proof-of-History hash of the current block */
    pb_byte_t poh_hash[32];
    /* signature_cnt is the number of transactions in the current block
 TODO is this correct? */
    uint64_t signature_cnt;
    /* account_cnt is the number of accounts changed in the current
 block.  This is also the number of leaves in the account delta
 Merkle tree. */
    uint64_t account_cnt;
    /* account_table_coff is offset from the first byte of the current
 chunk to the first byte of the account table chunk. */
    int64_t account_table_coff;
    /* accounts_lt_hash_checksum is the hash of all the accounts */
    pb_byte_t accounts_lt_hash_checksum[32];
} fd_solcap_BankPreimage;

typedef struct _fd_solcap_AccountTableMeta {
    /* slot is the slot number that this accounts table refers to. */
    uint64_t slot;
    /* account_table_coff is the chunk offset to the first entry of the
 accounts table. */
    uint64_t account_table_coff;
    /* account_table_cnt is the number of records in the accounts table.
 Equals BankPreimage.account_cnt. */
    uint64_t account_table_cnt;
} fd_solcap_AccountTableMeta;

typedef struct _fd_solcap_AccountMeta {
    uint64_t lamports;
    uint64_t slot;
    pb_byte_t owner[32];
    bool executable;
    /* data_coff is the chunk offset to account data. */
    int64_t data_coff;
    uint64_t data_sz;
} fd_solcap_AccountMeta;

/* StakeRewardEpoch is emitted at the beginning of a series of stake
 reward events (StakeRewardEvent, VoteAccountPayout, or
 StakeAccountPayout). */
typedef struct _fd_solcap_StakeRewardEpoch {
    /* Epoch in which the rewards are paid out. */
    uint64_t payout_epoch;
    /* Epoch in which the rewards were generated (almost always one
 less than payout_epoch) */
    uint64_t reward_epoch;
    /* Number of lamports generated by inflation. */
    uint64_t inflation_lamports;
    /* Total number of reward points generated by all vote accounts.
 Each lamport of stake produces one reward point for every vote
 credit that the delegated-to vote account generates. */
    pb_byte_t points[16];
} fd_solcap_StakeRewardEpoch;

/* StakeRewardEvent is emitted while calculating inflation rewards.
 Each stake account generates up to one of these events per epoch (at
 the epoch boundary).  On startup, these events are also generated. */
typedef struct _fd_solcap_StakeRewardEvent {
    /* Account address of the stake account that emitted this event. */
    pb_byte_t stake_account_address[32];
    /* Account address of the vote account that this stake account has
 delegated stake to. */
    pb_byte_t vote_account_address[32];
    /* Commission setting (percentage, integer in [0,100]) used when
 calculating vote/stake account reward split. */
    uint32_t commission;
    /* Lamport balance increase for vote account. */
    int64_t vote_rewards;
    /* Lamport balance increase for stake account. */
    int64_t stake_rewards;
    int64_t new_credits_observed;
} fd_solcap_StakeRewardEvent;

/* VoteAccountPayout is emitted when stake rewards for a vote account
 are actually paid out. */
typedef struct _fd_solcap_VoteAccountPayout {
    /* Account address of the vote account. */
    pb_byte_t address[32];
    /* Slot number in which the payout occurred. */
    uint64_t update_slot;
    /* New lamport balance of account. */
    uint64_t lamports;
    /* New minus previous lamport balance. */
    int64_t lamports_delta;
} fd_solcap_VoteAccountPayout;

typedef struct _fd_solcap_StakeAccountPayout {
    /* Account address of the stake account. */
    pb_byte_t address[32];
    /* Slot number in which the payout occurred. */
    uint64_t update_slot;
    /* New lamport balance of account. */
    uint64_t lamports;
    /* New minus previous lamport balance. */
    int64_t lamports_delta;
    /* New 'credits_observed' value of stake account. */
    uint64_t credits_observed;
    /* New minus previous 'credits_observed' value. */
    int64_t credits_observed_delta;
    /* New 'delegation.stake' value of stake account. */
    uint64_t delegation_stake;
    /* New minus previous 'delegation.stake' value of stake account. */
    int64_t delegation_stake_delta;
} fd_solcap_StakeAccountPayout;

typedef struct _fd_solcap_Transaction {
    pb_byte_t txn_sig[64];
    uint64_t slot;
    int32_t fd_txn_err;
    uint32_t fd_custom_err;
    uint64_t solana_txn_err;
    uint64_t fd_cus_used;
    uint64_t solana_cus_used;
    /* failed_instr_path is the tree path to the failed instruction.
 Zero length implies success. */
    pb_size_t failed_instr_path_count;
    uint32_t failed_instr_path[4];
    /* instr_err is the instruction processing error code. */
    uint32_t instr_err;
    int32_t instr_err_idx;
} fd_solcap_Transaction;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define fd_solcap_FileMeta_init_default          {0, 0, 0}
#define fd_solcap_BankPreimage_init_default      {0, {0}, {0}, {0}, {0}, 0, 0, 0, {0}}
#define fd_solcap_AccountTableMeta_init_default  {0, 0, 0}
#define fd_solcap_AccountMeta_init_default       {0, 0, 0, {0}, 0, 0, 0}
#define fd_solcap_StakeRewardEpoch_init_default  {0, 0, 0, {0}}
#define fd_solcap_StakeRewardEvent_init_default  {{0}, {0}, 0, 0, 0, 0}
#define fd_solcap_VoteAccountPayout_init_default {{0}, 0, 0, 0}
#define fd_solcap_StakeAccountPayout_init_default {{0}, 0, 0, 0, 0, 0, 0, 0}
#define fd_solcap_Transaction_init_default       {{0}, 0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0}, 0, 0}
#define fd_solcap_FileMeta_init_zero             {0, 0, 0}
#define fd_solcap_BankPreimage_init_zero         {0, {0}, {0}, {0}, {0}, 0, 0, 0, {0}}
#define fd_solcap_AccountTableMeta_init_zero     {0, 0, 0}
#define fd_solcap_AccountMeta_init_zero          {0, 0, 0, {0}, 0, 0, 0}
#define fd_solcap_StakeRewardEpoch_init_zero     {0, 0, 0, {0}}
#define fd_solcap_StakeRewardEvent_init_zero     {{0}, {0}, 0, 0, 0, 0}
#define fd_solcap_VoteAccountPayout_init_zero    {{0}, 0, 0, 0}
#define fd_solcap_StakeAccountPayout_init_zero   {{0}, 0, 0, 0, 0, 0, 0, 0}
#define fd_solcap_Transaction_init_zero          {{0}, 0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0}, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define fd_solcap_FileMeta_first_slot_tag        1
#define fd_solcap_FileMeta_slot_cnt_tag          2
#define fd_solcap_FileMeta_main_block_magic_tag  3
#define fd_solcap_BankPreimage_slot_tag          1
#define fd_solcap_BankPreimage_bank_hash_tag     2
#define fd_solcap_BankPreimage_prev_bank_hash_tag 3
#define fd_solcap_BankPreimage_account_delta_hash_tag 4
#define fd_solcap_BankPreimage_poh_hash_tag      5
#define fd_solcap_BankPreimage_signature_cnt_tag 6
#define fd_solcap_BankPreimage_account_cnt_tag   7
#define fd_solcap_BankPreimage_account_table_coff_tag 8
#define fd_solcap_BankPreimage_accounts_lt_hash_checksum_tag 9
#define fd_solcap_AccountTableMeta_slot_tag      1
#define fd_solcap_AccountTableMeta_account_table_coff_tag 2
#define fd_solcap_AccountTableMeta_account_table_cnt_tag 3
#define fd_solcap_AccountMeta_lamports_tag       1
#define fd_solcap_AccountMeta_slot_tag           2
#define fd_solcap_AccountMeta_owner_tag          4
#define fd_solcap_AccountMeta_executable_tag     5
#define fd_solcap_AccountMeta_data_coff_tag      6
#define fd_solcap_AccountMeta_data_sz_tag        7
#define fd_solcap_StakeRewardEpoch_payout_epoch_tag 1
#define fd_solcap_StakeRewardEpoch_reward_epoch_tag 2
#define fd_solcap_StakeRewardEpoch_inflation_lamports_tag 3
#define fd_solcap_StakeRewardEpoch_points_tag    4
#define fd_solcap_StakeRewardEvent_stake_account_address_tag 1
#define fd_solcap_StakeRewardEvent_vote_account_address_tag 2
#define fd_solcap_StakeRewardEvent_commission_tag 3
#define fd_solcap_StakeRewardEvent_vote_rewards_tag 4
#define fd_solcap_StakeRewardEvent_stake_rewards_tag 5
#define fd_solcap_StakeRewardEvent_new_credits_observed_tag 6
#define fd_solcap_VoteAccountPayout_address_tag  1
#define fd_solcap_VoteAccountPayout_update_slot_tag 2
#define fd_solcap_VoteAccountPayout_lamports_tag 3
#define fd_solcap_VoteAccountPayout_lamports_delta_tag 4
#define fd_solcap_StakeAccountPayout_address_tag 1
#define fd_solcap_StakeAccountPayout_update_slot_tag 2
#define fd_solcap_StakeAccountPayout_lamports_tag 3
#define fd_solcap_StakeAccountPayout_lamports_delta_tag 4
#define fd_solcap_StakeAccountPayout_credits_observed_tag 5
#define fd_solcap_StakeAccountPayout_credits_observed_delta_tag 6
#define fd_solcap_StakeAccountPayout_delegation_stake_tag 7
#define fd_solcap_StakeAccountPayout_delegation_stake_delta_tag 8
#define fd_solcap_Transaction_txn_sig_tag        1
#define fd_solcap_Transaction_slot_tag           2
#define fd_solcap_Transaction_fd_txn_err_tag     3
#define fd_solcap_Transaction_fd_custom_err_tag  4
#define fd_solcap_Transaction_solana_txn_err_tag 5
#define fd_solcap_Transaction_fd_cus_used_tag    6
#define fd_solcap_Transaction_solana_cus_used_tag 7
#define fd_solcap_Transaction_failed_instr_path_tag 8
#define fd_solcap_Transaction_instr_err_tag      9
#define fd_solcap_Transaction_instr_err_idx_tag  10

/* Struct field encoding specification for nanopb */
#define fd_solcap_FileMeta_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   first_slot,        1) \
X(a, STATIC,   SINGULAR, UINT64,   slot_cnt,          2) \
X(a, STATIC,   SINGULAR, FIXED64,  main_block_magic,   3)
#define fd_solcap_FileMeta_CALLBACK NULL
#define fd_solcap_FileMeta_DEFAULT NULL

#define fd_solcap_BankPreimage_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   slot,              1) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, bank_hash,         2) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, prev_bank_hash,    3) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, account_delta_hash,   4) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, poh_hash,          5) \
X(a, STATIC,   SINGULAR, UINT64,   signature_cnt,     6) \
X(a, STATIC,   SINGULAR, UINT64,   account_cnt,       7) \
X(a, STATIC,   SINGULAR, INT64,    account_table_coff,   8) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, accounts_lt_hash_checksum,   9)
#define fd_solcap_BankPreimage_CALLBACK NULL
#define fd_solcap_BankPreimage_DEFAULT NULL

#define fd_solcap_AccountTableMeta_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   slot,              1) \
X(a, STATIC,   SINGULAR, UINT64,   account_table_coff,   2) \
X(a, STATIC,   SINGULAR, UINT64,   account_table_cnt,   3)
#define fd_solcap_AccountTableMeta_CALLBACK NULL
#define fd_solcap_AccountTableMeta_DEFAULT NULL

#define fd_solcap_AccountMeta_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   lamports,          1) \
X(a, STATIC,   SINGULAR, UINT64,   slot,              2) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, owner,             4) \
X(a, STATIC,   SINGULAR, BOOL,     executable,        5) \
X(a, STATIC,   SINGULAR, INT64,    data_coff,         6) \
X(a, STATIC,   SINGULAR, UINT64,   data_sz,           7)
#define fd_solcap_AccountMeta_CALLBACK NULL
#define fd_solcap_AccountMeta_DEFAULT NULL

#define fd_solcap_StakeRewardEpoch_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   payout_epoch,      1) \
X(a, STATIC,   SINGULAR, UINT64,   reward_epoch,      2) \
X(a, STATIC,   SINGULAR, UINT64,   inflation_lamports,   3) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, points,            4)
#define fd_solcap_StakeRewardEpoch_CALLBACK NULL
#define fd_solcap_StakeRewardEpoch_DEFAULT NULL

#define fd_solcap_StakeRewardEvent_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, stake_account_address,   1) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, vote_account_address,   2) \
X(a, STATIC,   SINGULAR, UINT32,   commission,        3) \
X(a, STATIC,   SINGULAR, INT64,    vote_rewards,      4) \
X(a, STATIC,   SINGULAR, INT64,    stake_rewards,     5) \
X(a, STATIC,   SINGULAR, INT64,    new_credits_observed,   6)
#define fd_solcap_StakeRewardEvent_CALLBACK NULL
#define fd_solcap_StakeRewardEvent_DEFAULT NULL

#define fd_solcap_VoteAccountPayout_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, address,           1) \
X(a, STATIC,   SINGULAR, UINT64,   update_slot,       2) \
X(a, STATIC,   SINGULAR, UINT64,   lamports,          3) \
X(a, STATIC,   SINGULAR, INT64,    lamports_delta,    4)
#define fd_solcap_VoteAccountPayout_CALLBACK NULL
#define fd_solcap_VoteAccountPayout_DEFAULT NULL

#define fd_solcap_StakeAccountPayout_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, address,           1) \
X(a, STATIC,   SINGULAR, UINT64,   update_slot,       2) \
X(a, STATIC,   SINGULAR, UINT64,   lamports,          3) \
X(a, STATIC,   SINGULAR, INT64,    lamports_delta,    4) \
X(a, STATIC,   SINGULAR, UINT64,   credits_observed,   5) \
X(a, STATIC,   SINGULAR, INT64,    credits_observed_delta,   6) \
X(a, STATIC,   SINGULAR, UINT64,   delegation_stake,   7) \
X(a, STATIC,   SINGULAR, INT64,    delegation_stake_delta,   8)
#define fd_solcap_StakeAccountPayout_CALLBACK NULL
#define fd_solcap_StakeAccountPayout_DEFAULT NULL

#define fd_solcap_Transaction_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, txn_sig,           1) \
X(a, STATIC,   SINGULAR, UINT64,   slot,              2) \
X(a, STATIC,   SINGULAR, INT32,    fd_txn_err,        3) \
X(a, STATIC,   SINGULAR, UINT32,   fd_custom_err,     4) \
X(a, STATIC,   SINGULAR, UINT64,   solana_txn_err,    5) \
X(a, STATIC,   SINGULAR, UINT64,   fd_cus_used,       6) \
X(a, STATIC,   SINGULAR, UINT64,   solana_cus_used,   7) \
X(a, STATIC,   REPEATED, UINT32,   failed_instr_path,   8) \
X(a, STATIC,   SINGULAR, UINT32,   instr_err,         9) \
X(a, STATIC,   SINGULAR, INT32,    instr_err_idx,    10)
#define fd_solcap_Transaction_CALLBACK NULL
#define fd_solcap_Transaction_DEFAULT NULL

extern const pb_msgdesc_t fd_solcap_FileMeta_msg;
extern const pb_msgdesc_t fd_solcap_BankPreimage_msg;
extern const pb_msgdesc_t fd_solcap_AccountTableMeta_msg;
extern const pb_msgdesc_t fd_solcap_AccountMeta_msg;
extern const pb_msgdesc_t fd_solcap_StakeRewardEpoch_msg;
extern const pb_msgdesc_t fd_solcap_StakeRewardEvent_msg;
extern const pb_msgdesc_t fd_solcap_VoteAccountPayout_msg;
extern const pb_msgdesc_t fd_solcap_StakeAccountPayout_msg;
extern const pb_msgdesc_t fd_solcap_Transaction_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define fd_solcap_FileMeta_fields &fd_solcap_FileMeta_msg
#define fd_solcap_BankPreimage_fields &fd_solcap_BankPreimage_msg
#define fd_solcap_AccountTableMeta_fields &fd_solcap_AccountTableMeta_msg
#define fd_solcap_AccountMeta_fields &fd_solcap_AccountMeta_msg
#define fd_solcap_StakeRewardEpoch_fields &fd_solcap_StakeRewardEpoch_msg
#define fd_solcap_StakeRewardEvent_fields &fd_solcap_StakeRewardEvent_msg
#define fd_solcap_VoteAccountPayout_fields &fd_solcap_VoteAccountPayout_msg
#define fd_solcap_StakeAccountPayout_fields &fd_solcap_StakeAccountPayout_msg
#define fd_solcap_Transaction_fields &fd_solcap_Transaction_msg

/* Maximum encoded size of messages (where known) */
#define SOLANA_CAPTURE_FD_SOLCAP_PB_H_MAX_SIZE   fd_solcap_BankPreimage_size
#define fd_solcap_AccountMeta_size               91
#define fd_solcap_AccountTableMeta_size          33
#define fd_solcap_BankPreimage_size              214
#define fd_solcap_FileMeta_size                  31
#define fd_solcap_StakeAccountPayout_size        111
#define fd_solcap_StakeRewardEpoch_size          51
#define fd_solcap_StakeRewardEvent_size          107
#define fd_solcap_Transaction_size               168
#define fd_solcap_VoteAccountPayout_size         67

/* Mapping from canonical names (mangle_names or overridden package name) */
#define solana_capture_FileMeta fd_solcap_FileMeta
#define solana_capture_BankPreimage fd_solcap_BankPreimage
#define solana_capture_AccountTableMeta fd_solcap_AccountTableMeta
#define solana_capture_AccountMeta fd_solcap_AccountMeta
#define solana_capture_StakeRewardEpoch fd_solcap_StakeRewardEpoch
#define solana_capture_StakeRewardEvent fd_solcap_StakeRewardEvent
#define solana_capture_VoteAccountPayout fd_solcap_VoteAccountPayout
#define solana_capture_StakeAccountPayout fd_solcap_StakeAccountPayout
#define solana_capture_Transaction fd_solcap_Transaction
#define solana_capture_FileMeta_init_default fd_solcap_FileMeta_init_default
#define solana_capture_BankPreimage_init_default fd_solcap_BankPreimage_init_default
#define solana_capture_AccountTableMeta_init_default fd_solcap_AccountTableMeta_init_default
#define solana_capture_AccountMeta_init_default fd_solcap_AccountMeta_init_default
#define solana_capture_StakeRewardEpoch_init_default fd_solcap_StakeRewardEpoch_init_default
#define solana_capture_StakeRewardEvent_init_default fd_solcap_StakeRewardEvent_init_default
#define solana_capture_VoteAccountPayout_init_default fd_solcap_VoteAccountPayout_init_default
#define solana_capture_StakeAccountPayout_init_default fd_solcap_StakeAccountPayout_init_default
#define solana_capture_Transaction_init_default fd_solcap_Transaction_init_default
#define solana_capture_FileMeta_init_zero fd_solcap_FileMeta_init_zero
#define solana_capture_BankPreimage_init_zero fd_solcap_BankPreimage_init_zero
#define solana_capture_AccountTableMeta_init_zero fd_solcap_AccountTableMeta_init_zero
#define solana_capture_AccountMeta_init_zero fd_solcap_AccountMeta_init_zero
#define solana_capture_StakeRewardEpoch_init_zero fd_solcap_StakeRewardEpoch_init_zero
#define solana_capture_StakeRewardEvent_init_zero fd_solcap_StakeRewardEvent_init_zero
#define solana_capture_VoteAccountPayout_init_zero fd_solcap_VoteAccountPayout_init_zero
#define solana_capture_StakeAccountPayout_init_zero fd_solcap_StakeAccountPayout_init_zero
#define solana_capture_Transaction_init_zero fd_solcap_Transaction_init_zero

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
