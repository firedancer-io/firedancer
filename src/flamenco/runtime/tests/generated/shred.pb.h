/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_ORG_SOLANA_SEALEVEL_V1_SHRED_PB_H_INCLUDED
#define PB_ORG_SOLANA_SEALEVEL_V1_SHRED_PB_H_INCLUDED

#include "../../../nanopb/pb_firedancer.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* raw bytes to test shred parsing */
typedef struct fd_exec_test_shred_binary {
    pb_bytes_array_t *data;
} fd_exec_test_shred_binary_t;

typedef struct fd_exec_test_data_header {
    uint32_t parent_off;
    uint32_t flags;
    uint32_t size;
} fd_exec_test_data_header_t;

typedef struct fd_exec_test_code_header {
    uint32_t data_cnt;
    uint32_t code_cnt;
    uint32_t idx;
} fd_exec_test_code_header_t;

typedef struct fd_exec_test_parsed_shred {
    pb_callback_t signature;
    uint32_t variant;
    uint64_t slot;
    uint32_t idx;
    uint32_t version;
    uint32_t fec_set_idx;
    pb_size_t which_shred_type;
    union {
        fd_exec_test_data_header_t data;
        fd_exec_test_code_header_t code;
    } shred_type;
} fd_exec_test_parsed_shred_t;

/* If shred is accepted after parseing. This is all we are interested in
 between Firedancer and Agave. */
typedef struct fd_exec_test_accepts_shred {
    bool valid;
} fd_exec_test_accepts_shred_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define FD_EXEC_TEST_SHRED_BINARY_INIT_DEFAULT   {NULL}
#define FD_EXEC_TEST_DATA_HEADER_INIT_DEFAULT    {0, 0, 0}
#define FD_EXEC_TEST_CODE_HEADER_INIT_DEFAULT    {0, 0, 0}
#define FD_EXEC_TEST_PARSED_SHRED_INIT_DEFAULT   {{{NULL}, NULL}, 0, 0, 0, 0, 0, 0, {FD_EXEC_TEST_DATA_HEADER_INIT_DEFAULT}}
#define FD_EXEC_TEST_ACCEPTS_SHRED_INIT_DEFAULT  {0}
#define FD_EXEC_TEST_SHRED_BINARY_INIT_ZERO      {NULL}
#define FD_EXEC_TEST_DATA_HEADER_INIT_ZERO       {0, 0, 0}
#define FD_EXEC_TEST_CODE_HEADER_INIT_ZERO       {0, 0, 0}
#define FD_EXEC_TEST_PARSED_SHRED_INIT_ZERO      {{{NULL}, NULL}, 0, 0, 0, 0, 0, 0, {FD_EXEC_TEST_DATA_HEADER_INIT_ZERO}}
#define FD_EXEC_TEST_ACCEPTS_SHRED_INIT_ZERO     {0}

/* Field tags (for use in manual encoding/decoding) */
#define FD_EXEC_TEST_SHRED_BINARY_DATA_TAG       1
#define FD_EXEC_TEST_DATA_HEADER_PARENT_OFF_TAG  1
#define FD_EXEC_TEST_DATA_HEADER_FLAGS_TAG       2
#define FD_EXEC_TEST_DATA_HEADER_SIZE_TAG        3
#define FD_EXEC_TEST_CODE_HEADER_DATA_CNT_TAG    1
#define FD_EXEC_TEST_CODE_HEADER_CODE_CNT_TAG    2
#define FD_EXEC_TEST_CODE_HEADER_IDX_TAG         3
#define FD_EXEC_TEST_PARSED_SHRED_SIGNATURE_TAG  1
#define FD_EXEC_TEST_PARSED_SHRED_VARIANT_TAG    2
#define FD_EXEC_TEST_PARSED_SHRED_SLOT_TAG       3
#define FD_EXEC_TEST_PARSED_SHRED_IDX_TAG        4
#define FD_EXEC_TEST_PARSED_SHRED_VERSION_TAG    5
#define FD_EXEC_TEST_PARSED_SHRED_FEC_SET_IDX_TAG 6
#define FD_EXEC_TEST_PARSED_SHRED_DATA_TAG       7
#define FD_EXEC_TEST_PARSED_SHRED_CODE_TAG       8
#define FD_EXEC_TEST_ACCEPTS_SHRED_VALID_TAG     1

/* Struct field encoding specification for nanopb */
#define FD_EXEC_TEST_SHRED_BINARY_FIELDLIST(X, a) \
X(a, POINTER,  SINGULAR, BYTES,    data,              1)
#define FD_EXEC_TEST_SHRED_BINARY_CALLBACK NULL
#define FD_EXEC_TEST_SHRED_BINARY_DEFAULT NULL

#define FD_EXEC_TEST_DATA_HEADER_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   parent_off,        1) \
X(a, STATIC,   SINGULAR, UINT32,   flags,             2) \
X(a, STATIC,   SINGULAR, UINT32,   size,              3)
#define FD_EXEC_TEST_DATA_HEADER_CALLBACK NULL
#define FD_EXEC_TEST_DATA_HEADER_DEFAULT NULL

#define FD_EXEC_TEST_CODE_HEADER_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   data_cnt,          1) \
X(a, STATIC,   SINGULAR, UINT32,   code_cnt,          2) \
X(a, STATIC,   SINGULAR, UINT32,   idx,               3)
#define FD_EXEC_TEST_CODE_HEADER_CALLBACK NULL
#define FD_EXEC_TEST_CODE_HEADER_DEFAULT NULL

#define FD_EXEC_TEST_PARSED_SHRED_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   signature,         1) \
X(a, STATIC,   SINGULAR, UINT32,   variant,           2) \
X(a, STATIC,   SINGULAR, UINT64,   slot,              3) \
X(a, STATIC,   SINGULAR, UINT32,   idx,               4) \
X(a, STATIC,   SINGULAR, UINT32,   version,           5) \
X(a, STATIC,   SINGULAR, UINT32,   fec_set_idx,       6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (shred_type,data,shred_type.data),   7) \
X(a, STATIC,   ONEOF,    MESSAGE,  (shred_type,code,shred_type.code),   8)
#define FD_EXEC_TEST_PARSED_SHRED_CALLBACK pb_default_field_callback
#define FD_EXEC_TEST_PARSED_SHRED_DEFAULT NULL
#define fd_exec_test_parsed_shred_t_shred_type_data_MSGTYPE fd_exec_test_data_header_t
#define fd_exec_test_parsed_shred_t_shred_type_code_MSGTYPE fd_exec_test_code_header_t

#define FD_EXEC_TEST_ACCEPTS_SHRED_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     valid,             1)
#define FD_EXEC_TEST_ACCEPTS_SHRED_CALLBACK NULL
#define FD_EXEC_TEST_ACCEPTS_SHRED_DEFAULT NULL

extern const pb_msgdesc_t fd_exec_test_shred_binary_t_msg;
extern const pb_msgdesc_t fd_exec_test_data_header_t_msg;
extern const pb_msgdesc_t fd_exec_test_code_header_t_msg;
extern const pb_msgdesc_t fd_exec_test_parsed_shred_t_msg;
extern const pb_msgdesc_t fd_exec_test_accepts_shred_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define FD_EXEC_TEST_SHRED_BINARY_FIELDS &fd_exec_test_shred_binary_t_msg
#define FD_EXEC_TEST_DATA_HEADER_FIELDS &fd_exec_test_data_header_t_msg
#define FD_EXEC_TEST_CODE_HEADER_FIELDS &fd_exec_test_code_header_t_msg
#define FD_EXEC_TEST_PARSED_SHRED_FIELDS &fd_exec_test_parsed_shred_t_msg
#define FD_EXEC_TEST_ACCEPTS_SHRED_FIELDS &fd_exec_test_accepts_shred_t_msg

/* Maximum encoded size of messages (where known) */
/* fd_exec_test_ShredBinary_size depends on runtime parameters */
/* fd_exec_test_ParsedShred_size depends on runtime parameters */
#define FD_EXEC_TEST_ACCEPTS_SHRED_SIZE          2
#define FD_EXEC_TEST_CODE_HEADER_SIZE            18
#define FD_EXEC_TEST_DATA_HEADER_SIZE            18
#define ORG_SOLANA_SEALEVEL_V1_SHRED_PB_H_MAX_SIZE FD_EXEC_TEST_DATA_HEADER_SIZE

/* Mapping from canonical names (mangle_names or overridden package name) */
#define org_solana_sealevel_v1_ShredBinary fd_exec_test_ShredBinary
#define org_solana_sealevel_v1_DataHeader fd_exec_test_DataHeader
#define org_solana_sealevel_v1_CodeHeader fd_exec_test_CodeHeader
#define org_solana_sealevel_v1_ParsedShred fd_exec_test_ParsedShred
#define org_solana_sealevel_v1_AcceptsShred fd_exec_test_AcceptsShred
#define ORG_SOLANA_SEALEVEL_V1_SHRED_BINARY_INIT_DEFAULT FD_EXEC_TEST_SHRED_BINARY_INIT_DEFAULT
#define ORG_SOLANA_SEALEVEL_V1_DATA_HEADER_INIT_DEFAULT FD_EXEC_TEST_DATA_HEADER_INIT_DEFAULT
#define ORG_SOLANA_SEALEVEL_V1_CODE_HEADER_INIT_DEFAULT FD_EXEC_TEST_CODE_HEADER_INIT_DEFAULT
#define ORG_SOLANA_SEALEVEL_V1_PARSED_SHRED_INIT_DEFAULT FD_EXEC_TEST_PARSED_SHRED_INIT_DEFAULT
#define ORG_SOLANA_SEALEVEL_V1_ACCEPTS_SHRED_INIT_DEFAULT FD_EXEC_TEST_ACCEPTS_SHRED_INIT_DEFAULT
#define ORG_SOLANA_SEALEVEL_V1_SHRED_BINARY_INIT_ZERO FD_EXEC_TEST_SHRED_BINARY_INIT_ZERO
#define ORG_SOLANA_SEALEVEL_V1_DATA_HEADER_INIT_ZERO FD_EXEC_TEST_DATA_HEADER_INIT_ZERO
#define ORG_SOLANA_SEALEVEL_V1_CODE_HEADER_INIT_ZERO FD_EXEC_TEST_CODE_HEADER_INIT_ZERO
#define ORG_SOLANA_SEALEVEL_V1_PARSED_SHRED_INIT_ZERO FD_EXEC_TEST_PARSED_SHRED_INIT_ZERO
#define ORG_SOLANA_SEALEVEL_V1_ACCEPTS_SHRED_INIT_ZERO FD_EXEC_TEST_ACCEPTS_SHRED_INIT_ZERO

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
