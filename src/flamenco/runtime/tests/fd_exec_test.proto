syntax = "proto2";
package org.solana.sealevel.v1;

// Source:
// https://github.com/solana-foundation/specs/blob/main/runtime/compat/v1/context.proto

// Regenerate: "make -C src/flamenco/runtime/tests" (requires nanopb)

import "nanopb.proto";
option (nanopb_fileopt).package = "fd_exec_test";
option (nanopb_fileopt).include = "../../nanopb/pb_firedancer.h";

// A set of feature flags.
message FeatureSet {
    // Every item in this list marks an enabled feature.  The value of
    // each item is the first 8 bytes of the feature ID as a little-
    // endian integer.
    repeated fixed64 features = 1
        [(nanopb).type = FT_POINTER];
}

// The complete state of an account excluding its public key.
message AcctState {
    // The account key. Can be ommitted if obvious from the context.
    optional bytes address = 1
        [(nanopb).max_size = 32, (nanopb).fixed_length = true];

    required uint64 lamports = 2;
    required bytes data = 3
        [(nanopb).type = FT_POINTER];
    required bool executable = 4;
    required uint64 rent_epoch = 5;
    required bytes owner = 6
        [(nanopb).max_size = 32, (nanopb).fixed_length = true];
}

// EpochContext includes context scoped to an epoch.
// On "real" ledgers, it is created during the epoch boundary.
message EpochContext {
  required FeatureSet features = 1;
}

// SlotContext includes context scoped to a block.
// On "real" ledgers, it is created during the slot boundary.
message SlotContext {}

message TxnContext {}

message InstrAcct {
    // Selects an account in an external list
    required uint32 index = 1;
    required bool is_writable = 2;
    required bool is_signer = 3;
}

// The execution context of a program invocation (aka instruction).
// Contains all required information to independently replay an instruction.
// Also includes partial transaction context.
message InstrContext {
    // The address of the program invoked.  (32 bytes)
    required bytes program_id = 1
        [(nanopb).max_size = 32, (nanopb).fixed_length = true];

    // The address of the program loader if the invoked program is a user
    // deployed program.
    optional bytes loader_id = 2
        [(nanopb).max_size = 32, (nanopb).fixed_length = true];

    // Account state accessed by the instruction.
    repeated AcctState accounts = 3
        [(nanopb).type = FT_POINTER];

    // Account access list for this instruction (refers to above accounts list)
    repeated InstrAcct instr_accounts = 4
        [(nanopb).type = FT_POINTER];

    // The input data passed to program execution.
    required bytes data = 5
        [(nanopb).type = FT_POINTER];

    required uint64 cu_avail = 6;

    required TxnContext txn_context = 7;
    required SlotContext slot_context = 8;
    required EpochContext epoch_context = 9;
}

// The results of executing an InstrContext.
message InstrEffects {
    // result is zero if the instruction executed succesfully.
    // Otherwise, a non-zero error code.  Error codes are implementation
    // defined.
    required int32 result = 1;

    // Some error cases additionally have a custom error code.  Unlike
    // the expected_result, this is stable across clients.
    optional uint32 custom_err = 2;

    // Copies of accounts that were changed.  May be in an arbitrary
    // order.  The pubkey of each account is unique in this list.  Each
    // account address modified here must also be in the
    // InstrContext.
    repeated AcctState modified_accounts = 3
        [(nanopb).type = FT_POINTER];

    required uint64 cu_avail = 4;
}

// An instruction processing test fixture.
message InstrFixture {
    required InstrContext input = 1;
    required InstrEffects output = 2;
}
