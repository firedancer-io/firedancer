# logfile_fd: It can be disabled by configuration, but typically tiles
#             will open a log file on boot and write all messages there.
unsigned int logfile_fd

# logging: all log messages are written to a file and/or pipe
#
# 'WARNING' and above are written to the STDERR pipe, while all
# messages are always written to the log file.
#
# arg 0 is the file descriptor to write to.  The boot process ensures
# that descriptor 2 is always STDERR.
write: (or (eq (arg 0) 2)
           (eq (arg 0) logfile_fd))

# client: if a connectiion via connect() fails, close the file
# descriptor.  Only close the file descriptors opened via socket, so
# not STDERR nor the logfile.
#
# server: if a sendto a connection fails, close the file descriptor
#
# arg 0 is the file descriptor to close.
close: (not (or (eq (arg 0) logfile_fd)
                (eq (arg 0) 2)))

# server: read from an open connection that has been accepted
#
# arg 0 is the file descriptor to close.  We will restrict the file
# descriptor used for STDERR and logging.
read: (not (or (eq (arg 0) logfile_fd)
               (eq (arg 0) 2)))

# server: accept new connections
#
# arg 0 is the socket file descriptor.   We will restrict the file
# descriptor used for STDERR and logging.
accept4: (and (not (or (eq (arg 0) logfile_fd)
                       (eq (arg 0) 2)))
              (eq (arg 3) "SOCK_NONBLOCK|SOCK_CLOEXEC"))

# server: requires polling existing connections
ppoll

# client/server: need to send messages
#
# arg 0 is the file descriptor that we want to send messages to.  We
# will allow sending to any of the descriptors opened in the client.
# Only restrict from sending to the logfile and STDERR
sendto: (and (not (or (eq (arg 0) logfile_fd)
                      (eq (arg 0) 2)))
             (eq (arg 3) "MSG_NOSIGNAL")
             (eq (arg 4) 0)
             (eq (arg 5) 0))

# client: need to read from connections established by the client
#
# arg 0 is the file descriptor that we recieve messages from.  We will
# allow receiving to any of the descriptors opened in the client.  Only
# restrict from receiving to the logfile and STDERR
recvfrom: (and (not (or (eq (arg 0) logfile_fd)
                        (eq (arg 0) 2)))
               (eq (arg 3) 0)
               (eq (arg 4) 0)
               (eq (arg 5) 0))

# logging: 'WARNING' and above fsync the logfile to disk immediately
#
# arg 0 is the file descriptor to fsync.
fsync: (eq (arg 0) logfile_fd)
