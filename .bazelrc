# Prevent PATH and LD_LIBRARY path from leaking into build.
# See https://github.com/bazelbuild/bazel/issues/6648
# Will be removed in future Bazel releases.
build --incompatible_strict_action_env=true

# Use new toolchain-based C/C++ configuration.
# See https://github.com/bazelbuild/bazel/issues/7260
# To be removed in Bazel 7.0.0.
build --incompatible_enable_cc_toolchain_resolution

# asan: Build with AddressSanitizer
# Detects various undefined memory accesses
#
# https://clang.llvm.org/docs/AddressSanitizer.html
# https://github.com/google/sanitizers/wiki/AddressSanitizer
#
# Supported by GCC, Clang
build:asan-gcc --platforms=//:linux_x86_64_gcc
build:asan-gcc --features asan
build:asan-gcc --strip never
build:asan-gcc --action_env ASAN_OPTIONS=detect_leaks=0:color=always
build:asan-gcc --copt -fno-omit-frame-pointer

build:asan-clang --platforms=//:linux_x86_64_llvm
build:asan-clang --linkopt -fsanitize=address
build:asan-clang --copt -fsanitize=address
build:asan-clang --copt -fno-omit-frame-pointer
build:asan-clang --action_env ASAN_OPTIONS=detect_leaks=0:color=always

# msan: Build with MemorySanitizer
# Detects uninitialized memory reads
#
# https://clang.llvm.org/docs/MemorySanitizer.html
# https://github.com/google/sanitizers/wiki/MemorySanitizer
#
# Supported by Clang
build:msan-clang --platforms=//:linux_x86_64_llvm
build:msan-clang --linkopt -fsanitize=memory
build:msan-clang --copt -fsanitize=memory
build:msan-clang --copt -fno-omit-frame-pointer
build:msan-clang --action_env MSAN_OPTIONS=halt_on_error=1:color=always

# ubsan: Build with UndefinedBehaviorSanitizer
# Fast undefined behavior detector
#
# https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
#
# Supported by GCC (broken), Clang
build:ubsan-gcc --platforms=//:linux_x86_64_gcc
build:ubsan-gcc --features ubsan
build:ubsan-gcc --strip never
build:ubsan-gcc --copt -fno-omit-frame-pointer
build:ubsan-gcc --action_env UBSAN_OPTIONS=halt_on_error=1:print_stacktrace=1:color=always

build:ubsan-clang --platforms=//:linux_x86_64_llvm
build:ubsan-clang --linkopt -fsanitize=undefined
build:ubsan-clang --copt -fsanitize=undefined
build:ubsan-clang --copt -fno-sanitize=alignment,vptr,function
build:ubsan-clang --copt -fno-omit-frame-pointer
build:ubsan-clang --action_env UBSAN_OPTIONS=halt_on_error=1:print_stacktrace=1:color=always

# asan-libfuzzer: Build with libFuzzer and AddressSanitizer
#
# Supported by Clang
build:asan-libfuzzer --platforms=//:linux_x86_64_llvm
build:asan-libfuzzer --copt -fno-omit-frame-pointer
build:asan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine=@rules_fuzzing//fuzzing/engines:libfuzzer
build:asan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine_instrumentation=libfuzzer
build:asan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine_sanitizer=asan

# Coverage does not support hermetic toolchain
coverage --incompatible_strict_action_env=false
coverage --incompatible_enable_cc_toolchain_resolution=false
coverage --combined_report=lcov
coverage --coverage_report_generator=@bazel_tools//tools/test/CoverageOutputGenerator/java/com/google/devtools/coverageoutputgenerator:Main
coverage --instrumentation_filter=^//src/,!*_test\..*
coverage --platforms=//:linux_x86_64_gcc
coverage --instrument_test_targets
